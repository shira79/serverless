useDotenv: true

service: followertracking
# app and org for use with dashboard.serverless.com
app: followertracking-app
org: kyabetsu3104

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  apiName: followerTracking
  region: ${env:REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-layers

package:
  individually: true
  exclude:
    - package.json
    - package-lock.json
    - node_modules/**
    - .git/**
    - README.md

custom:
  serverless-layers:
    layersDeploymentBucket: ${env:LAYER_BUCKET}

functions:
  getUserList:
    handler: functions/getUserList.handle
    events:
    - http:
        path: /user
        method: get
        cors: true
  getCountData:
    handler: functions/getCountData.handle
    events:
    - http:
        path: /count/{id}
        method: get
        request:
          parameters:
            paths:
              id: true
        cors: true
  getUserId:
    handler: functions/getUserId.handle
    events:
    - http:
        path: /user/{userName}
        method: get
        request:
          parameters:
            paths:
              userName: true
        cors: true
  registerUser:
    handler: functions/registerUser.handle
    events:
    - http:
        path: /user
        method: post
        request:
          parameters:
            headers:
              id: true
              username: true
              name: true
        cors: true
  storeCounts:
    handler: functions/storeCounts.handle
    timeout: 15
    events:
    - schedule: cron(0 15 * * ? *)
  updateUsers:
    handler: functions/updateUsers.handle
    timeout: 15
    events:
    - schedule: cron(0 15 * * ? *)

resources:
  Resources:
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${env:TABLE_NAME}
        # キーの型を指定
        AttributeDefinitions:
          -
            AttributeName: type
            AttributeType: S
          -
            AttributeName: id_date
            AttributeType: S
        # キーの種類を指定（ハッシュorレンジキー）
        KeySchema:
          -
            AttributeName: type # Partition key
            KeyType: HASH
          -
            AttributeName: id_date #  Sort key
            KeyType: RANGE
        # プロビジョニングするキャパシティーユニットの設定
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1