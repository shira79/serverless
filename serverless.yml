# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: followertracking
# app and org for use with dashboard.serverless.com
app: followertracking-app
org: kyabetsu3104

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  apiName: followerTracking
  region: ${env:REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-layers

package:
  individually: true
  exclude:
    - package.json
    - package-lock.json
    - node_modules/**
    - .git/**
    - README.md

custom:
  serverless-layers:
    layersDeploymentBucket: ${env:LAYER_BUCKET}

functions:
  getUserId:
    handler: functions/getUserId.handle
    events:
    - http:
        path: /user/{userName}
        method: get
        request:
          parameters:
            paths:
              userName: true
        cors: true
  registerUser:
    handler:  functions/registerUser.handle
    memorySize: 4096
    timeout: 30
    events:
    - http:
        path: /user
        method: post
        request:
          parameters:
            headers:
              id: true
              username: true
              name: true
        cors: true

resources:
  Resources:
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${env:TABLE_NAME}
        # キーの型を指定
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
          -
            AttributeName: date
            AttributeType: S
        # キーの種類を指定（ハッシュorレンジキー）
        KeySchema:
          -
            AttributeName: user_id # Partition key
            KeyType: HASH
          -
            AttributeName: date #  Sort key
            KeyType: RANGE
        # プロビジョニングするキャパシティーユニットの設定
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1